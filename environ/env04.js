let mainTitle = "<h1 style='text-align: center;'>-----------Exploring a Mountain Forrest-----------</h1>";
let introtext = "<p>Up here, the air has the sharp scent of pine and damp earth. Up here, the mountains stand watch, and the trees see everything you do. There is a quiet, peacefulness here, one that only asks to be gently respected.</p>";
let sectionHeadings = [
    "With Love for the Earth",
    "With Love for Natural Ecosystems"
];

let section1 = {
    heading: sectionHeadings[0],
    text: "<p>Here, the land has contorted and shaped itself into a beautiful figure of rough horizons. Here, the land gives back to its inhabitants, and its inhabitants back to the land.</p>"
};

let section2 = {
    heading: sectionHeadings[1],
    text: "<p>Each connection, no matter how small, plays a small role in a larger balance of giving and receiving. The harmonious nature of natural ecosystems serves as a reminder to us that loss and gain are ultimately the same.</p>"
};

// Print to page using jQuery
$("#main-title").append(mainTitle );
$("#intro-text").append(introtext);
$("#section1").append("<h2 class='customhigh1' style='text-align: center;'>" + section1.heading + "</h2>");
$("#section1").append(section1.text);
$("#section2").append("<h2 class='customhigh2' style='text-align: center;'>" + section2.heading + "</h2>");
$("#section2").append(section2.text);


// I want my button to randomize the position of the images in the rows in the HTML code
    //How to do this: 1. the button on click will access the images. 2. once accessed, the images will be moved to different DIVS 
    //Can be done through labeling the DIVS ?(divs have IDs already)? and moving them around.

    // 1. take the current position of the images and place that into an array.
    // 2. Use that array to define the natural positon of the images.
    // 3. Generate a random array. If it is the same as the previously generated array, generate a new one.
    // 4. Use that array to define the new position of the images. 

    //Claude told me this was a way to stop the scramble from repeating, and scrambles it.
    let previousOrder = null;

    // All the shuffleArray function does is shuffle an array to be called later.

    function shuffleArray(array){
        let newArray = [...array];

    //...array creates a copy of the array instead of modyfying the original.

    //Shuffle Algorithm Found on google. looked up "array shuffle algorithm". This one is the "Fisher-Yates algorithm"

    //Didnt really understand it though, so the shuffle algorithm code is AI generated by Claude. Included are my notes because I 
    //spent time thinking through it.

        for (let i = newArray.length - 1; i > 0; i--) {
    //this is called a countdown loop, and basically starts at the last positon in the array (the length with be 1 higher than the 
    //what the array can call), keeps going through each position until N>0 (position1), and subtracts one from the last position in the array
    //until that happens. 

            const Q = Math.floor(Math.random() * (i + 1));
    //.floor rounds down to the largest integer. This is so a position in the array can be called.
    //.random generates a random number (decimals tho, hence.floor)
            [newArray[i], newArray[Q]] = [newArray[Q], newArray[i]];
    //shuffles the positions randomly (due to Q being a random version of N)
        }
        return newArray;
    }

    function rtheyEqual(arr1, arr2){

        if (!arr1 || !arr2) return false; 
        //!=NOT
        //||=OR
        if(arr1.length !== arr2.length) return false;
        // if statements were needed for crashes to stop.
        
        //Needed help itarating across the length of the array to check if they were equal.
        // ChatGPT generated for the rest of this function.

        for (let N = 0; N < arr1.length; N++){

            if (arr1[N] !== arr2[N]) return false;
        
        }
        return true;

    }

    //Now that the array buisiness is sorted I can make the button actually work.

    $("#hellobutton").click(function(){
        
        // Process each row independently to maintain structure
        $(".image-container").each(function(){
            let container = $(this);
            let allImages = [];
            
            // Collect all the image divs in this specific row
            container.find("div").each(function(){
                allImages.push($(this).clone(true));
    // ok. I know this is insane. I think I was way to ambitious with my first project so all my data is tied up in a way that is difficult to call.
    //Because of this. A lot of the functionality of this button (not sure how much exactly), was devloped with me trying out different ideas, failing,
    //and ultimately using a weird mish mash of ideas between what I was trying to do and what AI said works. The AI I used was Claude.
            });

            let currentOrder = allImages.map((img, index) => index);

            let newOrder;

            do {
                newOrder = shuffleArray(currentOrder);
            // shuffles until a new order is found
            } while (rtheyEqual(newOrder, currentOrder) && allImages.length > 1);

            // Clear this container
            container.empty();

            // Refill with shuffled images
            newOrder.forEach(function(index){
                container.append(allImages[index]);
            });
        });

        previousOrder = null; // Reset after scramble

        $(".image-container").hide().fadeIn(600);
    });

